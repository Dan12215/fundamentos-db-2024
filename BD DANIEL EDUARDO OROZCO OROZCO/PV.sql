-- MySQL Script generated by MySQL Workbench
-- Tue Apr 16 23:19:45 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema PV
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema PV
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `PV` DEFAULT CHARACTER SET utf8 COLLATE utf8_spanish2_ci ;
USE `PV` ;

-- -----------------------------------------------------
-- Table `PV`.`Roles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PV`.`Roles` ;

CREATE TABLE IF NOT EXISTS `PV`.`Roles` (
  `idRoles` INT NOT NULL,
  `nombre_rol` VARCHAR(45) NULL,
  PRIMARY KEY (`idRoles`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `PV`.`Empleados`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PV`.`Empleados` ;

CREATE TABLE IF NOT EXISTS `PV`.`Empleados` (
  `idEmpleados` INT NOT NULL,
  `nombre_completo` VARCHAR(45) NULL,
  `DPI` VARCHAR(15) NULL,
  `fecha_nac` DATE NULL,
  `anio_inicio_laboral` INT NULL,
  `estado` ENUM('Activo, Suspendido, Baja') NOT NULL,
  `usuario` VARCHAR(45) NULL,
  `paswoord` VARCHAR(45) NOT NULL,
  `Roles_idRoles` INT NOT NULL,
  PRIMARY KEY (`idEmpleados`),
  INDEX `fk_Empleados_Roles1_idx` (`Roles_idRoles` ASC) VISIBLE,
  CONSTRAINT `fk_Empleados_Roles1`
    FOREIGN KEY (`Roles_idRoles`)
    REFERENCES `PV`.`Roles` (`idRoles`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `PV`.`Proveedores`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PV`.`Proveedores` ;

CREATE TABLE IF NOT EXISTS `PV`.`Proveedores` (
  `idProveedores` INT NOT NULL,
  `nombre_insitucion` VARCHAR(45) NULL,
  `contacto` VARCHAR(10) NULL,
  `ubicacion` VARCHAR(45) NULL,
  `representante` VARCHAR(45) NULL,
  PRIMARY KEY (`idProveedores`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `PV`.`clientes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PV`.`clientes` ;

CREATE TABLE IF NOT EXISTS `PV`.`clientes` (
  `idclientes` INT NOT NULL,
  `nombre` VARCHAR(45) NULL,
  `DPI` VARCHAR(15) NULL,
  `NIT` VARCHAR(9) NULL,
  `contacto` VARCHAR(10) NULL,
  PRIMARY KEY (`idclientes`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `PV`.`Categorias`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PV`.`Categorias` ;

CREATE TABLE IF NOT EXISTS `PV`.`Categorias` (
  `idCategorias` INT NOT NULL,
  `nombre_categoria` VARCHAR(45) NULL,
  PRIMARY KEY (`idCategorias`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `PV`.`Productos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PV`.`Productos` ;

CREATE TABLE IF NOT EXISTS `PV`.`Productos` (
  `idProductos` INT NOT NULL,
  `nombre` VARCHAR(45) NULL,
  `descripcion` TEXT(100) NULL,
  `sku` VARCHAR(45) NULL,
  `stock` INT NULL,
  `precio_compra` DECIMAL(60) NULL,
  `precio_venta` DECIMAL(60) NULL,
  `Categorias_idCategorias` INT NOT NULL,
  PRIMARY KEY (`idProductos`),
  INDEX `fk_Productos_Categorias1_idx` (`Categorias_idCategorias` ASC) VISIBLE,
  CONSTRAINT `fk_Productos_Categorias1`
    FOREIGN KEY (`Categorias_idCategorias`)
    REFERENCES `PV`.`Categorias` (`idCategorias`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `PV`.`Ingreso_productos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PV`.`Ingreso_productos` ;

CREATE TABLE IF NOT EXISTS `PV`.`Ingreso_productos` (
  `idIngreso_productos` INT NOT NULL,
  `fecha_ingreso` DATE NULL,
  `cantidad` INT NULL,
  `Proveedores_idProveedores` INT NOT NULL,
  `Productos_idProductos` INT NOT NULL,
  PRIMARY KEY (`idIngreso_productos`),
  INDEX `fk_Ingreso_productos_Proveedores1_idx` (`Proveedores_idProveedores` ASC) VISIBLE,
  INDEX `fk_Ingreso_productos_Productos1_idx` (`Productos_idProductos` ASC) VISIBLE,
  CONSTRAINT `fk_Ingreso_productos_Proveedores1`
    FOREIGN KEY (`Proveedores_idProveedores`)
    REFERENCES `PV`.`Proveedores` (`idProveedores`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Ingreso_productos_Productos1`
    FOREIGN KEY (`Productos_idProductos`)
    REFERENCES `PV`.`Productos` (`idProductos`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `PV`.`Egresos_productos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PV`.`Egresos_productos` ;

CREATE TABLE IF NOT EXISTS `PV`.`Egresos_productos` (
  `idEgresos_productos` INT NOT NULL,
  `fecha_egreso` DATE NULL,
  `cantidad` INT NULL,
  `clientes_idclientes` INT NOT NULL,
  `Productos_idProductos` INT NOT NULL,
  PRIMARY KEY (`idEgresos_productos`),
  INDEX `fk_Egresos_productos_clientes1_idx` (`clientes_idclientes` ASC) VISIBLE,
  INDEX `fk_Egresos_productos_Productos1_idx` (`Productos_idProductos` ASC) VISIBLE,
  CONSTRAINT `fk_Egresos_productos_clientes1`
    FOREIGN KEY (`clientes_idclientes`)
    REFERENCES `PV`.`clientes` (`idclientes`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Egresos_productos_Productos1`
    FOREIGN KEY (`Productos_idProductos`)
    REFERENCES `PV`.`Productos` (`idProductos`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `PV`.`Sucursales`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PV`.`Sucursales` ;

CREATE TABLE IF NOT EXISTS `PV`.`Sucursales` (
  `idSucursales` INT NOT NULL,
  `nombre_sucursal` VARCHAR(45) NULL,
  `ubicacion` VARCHAR(100) NULL,
  `Empleados_idEmpleados` INT NOT NULL,
  `Egresos_productos_idEgresos_productos` INT NOT NULL,
  `Ingreso_productos_idIngreso_productos` INT NOT NULL,
  `Productos_idProductos` INT NOT NULL,
  PRIMARY KEY (`idSucursales`),
  INDEX `fk_Sucursales_Empleados1_idx` (`Empleados_idEmpleados` ASC) VISIBLE,
  INDEX `fk_Sucursales_Egresos_productos1_idx` (`Egresos_productos_idEgresos_productos` ASC) VISIBLE,
  INDEX `fk_Sucursales_Ingreso_productos1_idx` (`Ingreso_productos_idIngreso_productos` ASC) VISIBLE,
  INDEX `fk_Sucursales_Productos1_idx` (`Productos_idProductos` ASC) VISIBLE,
  CONSTRAINT `fk_Sucursales_Empleados1`
    FOREIGN KEY (`Empleados_idEmpleados`)
    REFERENCES `PV`.`Empleados` (`idEmpleados`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Sucursales_Egresos_productos1`
    FOREIGN KEY (`Egresos_productos_idEgresos_productos`)
    REFERENCES `PV`.`Egresos_productos` (`idEgresos_productos`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Sucursales_Ingreso_productos1`
    FOREIGN KEY (`Ingreso_productos_idIngreso_productos`)
    REFERENCES `PV`.`Ingreso_productos` (`idIngreso_productos`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Sucursales_Productos1`
    FOREIGN KEY (`Productos_idProductos`)
    REFERENCES `PV`.`Productos` (`idProductos`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- Listar todos los usuarios
SELECT * FROM PV.Empleados;

-- Listar todos los productos
SELECT * FROM PV.Productos;

-- Listar todos los clientes
SELECT * FROM PV.clientes;

-- Mostrar la cantidad de productos registrados en el sistema donde su saldo sea mayor a 0
SELECT COUNT(*) AS cantidad_productos FROM PV.Productos WHERE stock > 0;

-- Listar los productos donde su saldo sea menor a 5
SELECT * FROM PV.Productos WHERE stock < 5;

-- Mostrar el producto con el stock m치s alto
SELECT * FROM PV.Productos ORDER BY stock DESC LIMIT 1;

-- Mostrar el producto con el stock m치s bajo
SELECT * FROM PV.Productos ORDER BY stock ASC LIMIT 1;

-- Mostrar al cliente con m치s compras
SELECT c.idclientes, c.nombre, COUNT(ep.idEgresos_productos) AS compras_realizadas
FROM PV.clientes c
JOIN PV.Egresos_productos ep ON c.idclientes = ep.clientes_idclientes
GROUP BY c.idclientes
ORDER BY compras_realizadas DESC
LIMIT 1;

-- Mostrar al proveedor que m치s se le ha adquirido productos
SELECT p.idProveedores, p.nombre_insitucion, COUNT(ip.idIngreso_productos) AS productos_adquiridos
FROM PV.Proveedores p
JOIN PV.Ingreso_productos ip ON p.idProveedores = ip.Proveedores_idProveedores
GROUP BY p.idProveedores
ORDER BY productos_adquiridos DESC
LIMIT 1;

-- El valor total en quetzales de todos los productos que tienen stock disponible en bodega
SELECT SUM(stock * precio_venta) AS valor_total_quetzales
FROM PV.Productos
WHERE stock > 0;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
